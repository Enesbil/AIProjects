from pymongo import MongoClient
from langchain_openai import OpenAIEmbeddings, OpenAI
from langchain_mongodb import MongoDBAtlasVectorSearch
from langchain_community.document_loaders import DirectoryLoader
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param

client = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

embeddings = OpenAIEmbeddings(openai_api_key=key_param.openai_api_key)
vectorStore = MongoDBAtlasVectorSearch(
    collection=collection, 
    embedding=embeddings,
    index_name="vector_index"
)

def query_data(query):
    try:
        if not query.strip():
            return "Please enter a question", "Please enter a question"
        
        print(f"Processing query: {query}")  # Debug output
        
        #simple similarity search
        docs = vectorStore.similarity_search(query, k=1)
        if not docs:
            return "No relevant documents found", "No relevant documents found"
            
        as_output = docs[0].page_content
        print(f"Found document: {as_output[:100]}...")  # Debug output

        # Set up full RAG chain
        llm = OpenAI(openai_api_key=key_param.openai_api_key, temperature=0)
        retriever = vectorStore.as_retriever()
        qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)
        retriever_output = qa.run(query)

        return as_output, retriever_output
    
    except Exception as e:
        error_msg = f"Error: {str(e)}"
        print(f"Debug - Error occurred: {error_msg}")
        return error_msg, error_msg

with gr.Blocks(theme=gr.themes.Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """
    )
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text of most similar document)")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to an LLM (RAG)")

    button.click(query_data, inputs=[textbox], outputs=[output1, output2])
